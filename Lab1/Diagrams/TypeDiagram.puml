@startuml
package "Lab1" {

  class Wedding {
    - _weddingPhase: WeddingPhase
    - _groom: Groom
    - _fiancee: Fiancee
    - _ceremony: Ceremony
    - _banquet: Banquet
    - _weddingPlace: WeddingPlace
    - _guests: List<Guest>
    - _sharedBudget: int
    - isConcluded: bool
    + WeddingPhaseString: string
    + ChangeState()
    + SharedBudget: int
  }

  abstract class WeddingPhase {
    {abstract} + GetToTheNextPhase(wedding: Wedding)
  }

  class CreatingNewlywedState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingWeddingPlaceState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingFianceeDressState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingGroomDressState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingRingState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingWeddingMenuState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class GuestInvitationState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class CeremonyState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class PhotoSessionState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class BanquetState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class SummarizeState {
    + GetToTheNextPhase(wedding: Wedding)
  }
  class ChoosingWeddingPhaseState {
    + GetToTheNextPhase(wedding: Wedding)
  }

  WeddingPhase <|-- CreatingNewlywedState
  WeddingPhase <|-- ChoosingWeddingPlaceState
  WeddingPhase <|-- ChoosingFianceeDressState
  WeddingPhase <|-- ChoosingGroomDressState
  WeddingPhase <|-- ChoosingRingState
  WeddingPhase <|-- ChoosingWeddingMenuState
  WeddingPhase <|-- GuestInvitationState
  WeddingPhase <|-- CeremonyState
  WeddingPhase <|-- PhotoSessionState
  WeddingPhase <|-- BanquetState
  WeddingPhase <|-- SummarizeState
  WeddingPhase <|-- ChoosingWeddingPhaseState

class IOSystem {
    {static} + ChooseNameForNewlyweds(out groomName: string, out fianceeName: string)
    {static} + ChooseWeddingPlace(weddingMap: WeddingMap, out indexOfPlace: int)
    {static} + ChooseWeddingDressForFiancee(suitStore: SuitStore, out indexOfFianceeDress: int)
    {static} + ChooseWeddingDressForGroom(suitStore: SuitStore, out indexOfGroomDress: int)
    {static} + ChooseWeddingRing(ringStore: RingStore, out indexOfRing: int)
    {static} + ChooseWeddingMenu(weddingMenu: WeddingMenu, out indexesOfWeddingMenu: int[])
    {static} + ChooseWeddingPhase(out indexOfWeddingPhase: int)
    {static} + InviteGuests(out names: String[])
    {static} + DeclareMarriage(groom: Groom, fiancee: Fiancee)
    {static} + DeclareBanquet()
    {static} + DeclarePhotoSession()
    {static} + DisplaySummarazation(amountOfPoints: int)
    {static} + AskForPressingEnter()
    {static} + GetPrestigeString(attributePrestige: AttributePrestige)
    {static} + GetPrestigeFromString(attributePrestigeString: string)
    {static} + PrintBudget(budget: int)
    {static} + GetTheWeddingStateString(weddingPhase: WeddingPhase)
    {static} + GetTheWeddingPhaseFromString(weddingPhaseString: string)
    {static} + Clear()
    {static} + DisplayCeremonyRequirements()
    {static} + DisplayPhotoSessionRequirements()
    {static} + DisplayBanquetRequirements()
    {static} + DisplaySummarizationRequirements()
    {static} + DisplayBuyingAttributesRequirements()
    {static} + DisplayFinalResult(wedding: Wedding)
    {static} + ShowAlreadyMarriedStatus()
    {static} + ShowAlreadyHeldBanquetStatus()
    {static} - DisplayWeddingDishes(weddingDishes: List~Dish~)
    {static} - DisplayWeddingDresses(weddingDresses: List~Suit~)
    {static} - DisplayWeddingRings(weddingRings: List~Ring~)
    {static} - DisplayWeddingPlaces(weddingPlaces: List~WeddingPlace~)
    {static} - TakeTheNumericInput()
    {static} - CheckIfTheIndexInTheArrayBounds<T>(index: int, array: List~T~)
    {static} - TakeTheCorrectNumericIndex<T>(array: List~T~)
    {static} - TakeTheCorrectStringInput()
    {static} - DisplayMainMenu()
}

 class PhaseRerouter {
    {static} - _weddingPhases: List<WeddingPhase>
    {static} + WeddingPhases: List<WeddingPhase>
    {static} + AssignThePhase(wedding: Wedding, index: int)
    {static} - CheckIfWeddingCorrespondToBasicRequirements(wedding: Wedding): bool
    {static} - CheckIfWeddingCorrespondToAdditionalRequirements(wedding: Wedding): bool
  }

  class ResultSummarizer {
    + Summarize(wedding: Wedding): int
    + CalculateDeadEnd(wedding: Wedding, prices: List<uint>): bool
  }

  class Banquet {
    - _guests: List<Guest>
    - _dishes: List<Dish>
    - _wasHeld: bool
    + Dishes: List<Dish>
    + WasHeld: bool
  }

  class Ceremony {
    - _guests: List<Guest>
    - _groom: Groom
    - _fiancee: Fiancee
    - _wasHeld: bool
    + Guests: List<Guest>
    + WasHeld: bool
    + DeclareHusbandAndWife(groom: Groom, fiancee: Fiancee)
  }

  class Dish {
    - _name: string
    - _price: uint
    - _foodPower: uint
    + Name: string
    + Price: uint
    + FoodPower: uint
  }

  class Guest {
    - _name: string
    - _hungerLevel: uint
    + Name: string
    + HungerLevel: uint
  }

  class Newlywed {
    - _budget: uint
    - _name: string
    - _suit: Suit
    - _isMarried: bool
    - _ring: Ring
    + Budget: uint
    + Name: string
    + Suit: Suit
    + IsMarried: bool
    + Ring: Ring
    + InviteGuests(names: string[], wedding: Wedding)
  }

  class Groom {
    + Groom(_name: string)
    + Groom()
  }
  Groom --|> Newlywed

  class Fiancee {
    + Fiancee(_name: string)
    + Fiancee()
  }
  Fiancee --|> Newlywed

  class WeddingAttribute {
    - _price: uint
    - _attributePrestige: AttributePrestige
    - _brand: string
    + Price: uint
    + Brand: string
    + Prestige: AttributePrestige
  }
  
  class WeddingPlace {
    - _date: DateTime
    - _price: uint
    - _guestCapacity: uint
    - _location: string
    + Date: DateTime
    + Price: uint
    + GuestCapacity: uint
    + Location: string
    + WeddingPlace(price: uint, date: DateTime, guestCapacity: uint, location: string)
  }

  class Ring {
    + Ring(price: uint, brand: string)
  }
  Ring --|> WeddingAttribute
  Newlywed "1" o-- "1" Ring

  class Suit {
    + Suit(price: uint, brand: string)
  }
  Suit --|> WeddingAttribute
  Newlywed "1" o-- "1" Suit

  WeddingAttribute "1" o-- "1" AttributePrestige

  class RingStore {
    - _brands: string[]
    - _rings: List<Ring>
    + Rings: List<Ring>
    + AssignTheRings(wedding: Wedding, ringIndex: int)
  }
  RingStore "1" *-- "*" Ring

  class SuitStore {
    - _menBrands: string[]
    - _womenBrands: string[]
    - _menSuits: List<Suit>
    - _womenSuits: List<Suit>
    + MenSuits: List<Suit>
    + WomenSuits: List<Suit>
    + AssignTheSuitToTheGroom(wedding: Wedding, suitIndex: int)
    + AssignTheSuitToTheFiancee(wedding: Wedding, suitIndex: int)
  }
  SuitStore "1" *-- "*" Suit

  class WeddingMap {
    - _weddingPlaces: List<WeddingPlace>
    - _locations: string[]
    + WeddingPlaces: List<WeddingPlace>
    + AssignThePlace(wedding: Wedding, indexOfPlace: int)
  }
  WeddingMap "1" *-- "*" WeddingPlace

  class WeddingMenu {
    - _menu: List<KeyValuePair<string, uint>>
    - _dishes: List<Dish>
    + Dishes: List<Dish>
    + AssignTheDishes(wedding: Wedding, indexesOfDishes: int[])
  }
  WeddingMenu "1" *-- "*" Dish

  enum AttributePrestige {
    Cheap
    Normal
    Premium
  }

  class JsonStateManager {
    - GetFilePath(fileName: string): string
    {static} + SaveState<T>(state: T, fileName: string)
    {static} + LoadState<T>(fileName: string): T
    {static} + DeleteState(fileName: string)
  }
    
  PhaseRerouter "1" *-- "*" WeddingPhase

  Wedding "1" *-- "1" Banquet
  Wedding "1" *-- "1" Ceremony
  Wedding "1" o-- "1" WeddingPlace
  Wedding "1" o-- "1" Groom
  Wedding "1" o-- "1" Fiancee
  Wedding "1" *-- "*" Guest

  Banquet "1" *-- "*" Dish

  Ceremony "1" *-- "*" Guest
  Ceremony "1" o-- "1" Groom
  Ceremony "1" o-- "1" Fiancee
}
@enduml
